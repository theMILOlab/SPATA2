% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/initiateSpataObject.R
\name{initiateSpataObject_Examples}
\alias{initiateSpataObject_Examples}
\title{Initiate a \code{spata2} object from example data sets}
\usage{
initiateSpataObject_Examples(
  data_set = "stxBrain",
  type = "anterior1",
  force = FALSE,
  gene_set_path = NULL,
  SCTransform = FALSE,
  NormalizeData = list(normalization.method = "LogNormalize", scale.factor = 1000),
  FindVariableFeatures = list(selection.method = "vst", nfeatures = 2000),
  ScaleData = TRUE,
  RunPCA = list(npcs = 60),
  FindNeighbors = list(dims = 1:30),
  FindClusters = list(resolution = 0.8),
  RunTSNE = TRUE,
  RunUMAP = list(dims = 1:30),
  verbose = TRUE
)
}
\arguments{
\item{data_set}{Character value. The data-set from which to create the \code{spata2} object.
Currently only \emph{'stxBrain'} is available. Additional datat sets will be added
shortly.}

\item{type}{Given to argument \code{type} of funciton \code{SeuratData::LoadData()}.}

\item{force}{Logical. If set to TRUE, the function installs all requirements
(packages, data sets) automatically without requesting any further permission.
If set to FALSE, the function stops with an informative error message when
it encounters missing installations.}

\item{gene_set_path}{Character value (or NULL). Specifies the path to a
.RDS-file containing a data.frame that is to be used as input for slot @used_genesets.

Must have the character-variables

\itemize{
\item{\emph{'ont'}: The gene set names.}
\item{\emph{'gene'}: The belonging gene names.}
}

If set to NULL the default gene-set data.frame will used. Run \code{?gsdf} to get more information.}

\item{SCTransform}{A named list of arguments given to \code{Seurat::SCTransform()}, TRUE or FALSE.}

\item{NormalizeData}{A named list of arguments given to \code{Seurat::NormalizeData()}, TRUE or FALSE.}

\item{FindVariableFeatures}{A named list of arguments given to \code{Seurat::FindVariableFeatures()}, TRUE or FALSE.}

\item{ScaleData}{A named list of arguments given to \code{Seurat::ScaleData()}, TRUE or FALSE.

Hint: If set to TRUE or the argument-list provided does not specify the argument \code{features} input
for argument \code{features} is set to \code{base::rownames(seurat_object)}.}

\item{RunPCA}{A named list of arguments given to \code{Seurat::RunPCA()}, TRUE or FALSE.}

\item{FindNeighbors}{A named list of arguments given to \code{Seurat::FindNeighbors()}, TRUE or FALSE.}

\item{FindClusters}{A named list of arguments given to \code{Seurat::FindClusters()}, TRUE or FALSE.}

\item{RunTSNE}{A named list of arguments given to \code{Seurat::RunTSNE()}, TRUE or FALSE.}

\item{RunUMAP}{A named list of arguments given to \code{Seurat::RunUMAP()}, TRUE or FALSE.}

\item{verbose}{Logical. If set to TRUE informative messages regarding
the computational progress will be printed.

(Warning messages will always be printed.)}
}
\value{
A \code{spata2} object.
}
\description{
Creates and returns an object of class spata
from the example data sets provided by the package \emph{SeuratData}.
See details for more.
}
\details{
The loading and preprocessing of the \code{spata2} object  currently relies on the Seurat-package. Before any pre processing function is applied
mitochondrial and stress genes are discarded. For more advanced users the arguments above starting with a capital letter allow to
manipulate the way the \code{spata2} object is processed. For all of these arguments apply the following instructions:

\itemize{
\item{If set to FALSE the processing function is skipped.}
\item{If set to TRUE the respective function is called with it's default argument settings. Note: \code{RunUMAP()} needs
additional input!}
\item{If a named list is provided the respective function is called whereby the named list will provide the argument-input (the \code{Seurat} object to be constructed must not be named and will be
passed to every function as the first argument!!!.)}
}

Note that certain listed functions require previous functions! E.g. if \code{RunPCA} is set to FALSE \code{RunTSNE()}
will result in an error. (\code{base::tryCatch()} will prevent the function from crashing but the respective slot
is going to be empty.) Skipping functions might result in an incomplete \code{spata2} object. Use \code{validateSpataObject()} after
initiating it in order to see which slots are valid and which are not.
}
