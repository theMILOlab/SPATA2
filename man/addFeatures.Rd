% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/add.R
\name{addFeatures}
\alias{addFeatures}
\title{Add a new feature}
\usage{
addFeatures(
  object,
  feature_df,
  feature_names = NULL,
  key_variable = "barcodes",
  overwrite = FALSE,
  of_sample = NA
)
}
\arguments{
\item{object}{A valid spata-object.}

\item{feature_df}{A data.frame that contains the key variables as well
as the informative variables that are to be joined.}

\item{feature_names}{Character vector or NULL. See details for more.}

\item{key_variable}{Character value. Either \emph{'barcodes'} or \emph{'coordinates'}.
If set to \emph{'coordinates'} the \code{feature_df}-input must contain numeric x- and
y- variables.

Key variables are variables in a data.frame that uniquely identify each observation -
in this case each barcode-spot. In SPATA the barcode-variable is a key-variable on its own,
x- and y-coordinates work as key-variables if they are used combined.}

\item{overwrite}{Logical. If the specified feature names already exist in the
current spata-object this argument must be set to TRUE in order to overwrite them.}

\item{of_sample}{This argument is currently inactive. It might be reactivated when
spata-objects can store more than one sample.}
}
\value{
The input \code{spata2} object containing the added or computed
results.
}
\description{
Adds new externally generated variables to the spata-object's feature data
to make them available for all SPATA-intern functions.
}
\details{
If you are only interested in adding specific features to the spata-object
you can specify those with the \code{feature_names}-argument. If no variables
are specified this way all variables found in the input data.frame for argument
\code{feature_df} are taken. (Apart from variables called \emph{barcodes, sample, x} and \emph{y}).

Eventually the new features are joined via \code{dplyr::left_join()} over the
key-variables \emph{barcodes} or \emph{x} and \emph{y}. Additional steps secure
the joining process.
}
\examples{
#Not run:

mncl_clusters <- findMonocleClusters(object = spata_obj)

spata_obj <- addFeatures(object = spata_obj,
                         feature_names = NULL, # add all variables...
                         feature_df = mncl_clusters # ... from the data.frame 'mncl_clusters'
                         )

getGroupingOptions(object = spata_obj)
}
