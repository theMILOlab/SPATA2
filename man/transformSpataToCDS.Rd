% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/t.R
\name{transformSpataToCDS}
\alias{transformSpataToCDS}
\title{Transform spata-object to cell-data-set (Monocle3)}
\usage{
transformSpataToCDS(
  object,
  preprocess_method = "PCA",
  reduction_method = c("PCA", "UMAP"),
  cluster_method = "leiden",
  estimate_size_factors = list(),
  preprocess_cds = list(),
  reduce_dimension = list(),
  cluster_cells = list(),
  learn_graph = list(),
  order_cells = list(),
  of_sample = NA,
  verbose = TRUE
)
}
\arguments{
\item{object}{An object of class \code{spata2}.}

\item{preprocess_method}{Monocle3 - description:

A string specifying the initial dimension method to use,
currently either PCA or LSI. For LSI (latent semantic
indexing), it converts the (sparse) expression matrix into
tf-idf matrix and then performs SVD to decompose the gene
expression / cells into certain modules / topics. Default
is "PCA".}

\item{reduction_method}{Monocle3 - description:

A character string specifying the algorithm to use for
dimensionality reduction. Currently "UMAP", "tSNE", "PCA"
and "LSI" are supported.}

\item{cluster_method}{Monocle3 - description:

String indicating the clustering method to use. Options are
"louvain" or "leiden". Default is "leiden". Resolution parameter
is ignored if set to "louvain".}

\item{verbose}{Logical. If set to TRUE informative messages regarding
the computational progress will be printed.

(Warning messages will always be printed.)}

\item{estimate_size_factors_args}{A list of arguments given to \code{monocle3::estimate_size_factors()}.}

\item{preprocess_cds_args}{A list of arguments given to \code{monocle3::preprocess_cds()}.}

\item{reduce_dimension_args}{A list of arguments given to \code{monocle3::reduce_dimension()}.}

\item{cluster_cells_args}{A list of arguments given to \code{monocle3::cluster_cells()}.}

\item{learn_graph_args}{A list of arguments given to \code{monocle3::learn_graph()}.}

\item{order_cells_args}{A list of arguments given to \code{monocle3::order_cells()}.}

\item{save_cds_file}{Character value or NULL. A file-directory (that does not already exists) under which created cell_data_set-object
is saved. Should end with \emph{'.RDS'}.}
}
\value{
A monocle3::cell_data_set object.
}
\description{
Takes the count matrix of your spata-object and creates a
cell_data_set-object with it. See details for more information on how to use
the arguments.
}
\details{
\code{compileCellDataSet()} is a convenient wrapper around all pre processing functions
monocle3 provides to handle it's core object - the cell_data_set - after it's initiation. Apart from \code{object}
and \code{of_sample} arguments this function has two argument families.

Handling \code{*_method}-arguments:

Monocle3 allows to use different methods for dimensional-reduction or clustering which depend
on each other. These arguments take a character vector of all valid inputs. \code{transformSpataToCDS()} iterates
over all valid combinations and returns the cell_data_set with the computed information inside.

Handling monocle-function-arguments:

These arguments take named lists of arguments that are given to the respective function. The \code{_method}-arguments
as well as the argument \code{cds} are automatically defined and must not be included in the given lists!!! Empty lists - the default -
result in running the function with it's default parameters.

The spata-objects feature data (@fdata) is passed to the cell_data_set for it's slot \code{cell_meta_data}.
}
\keyword{internal}
